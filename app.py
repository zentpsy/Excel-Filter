import streamlit as st
import pandas as pd
import os
from io import BytesIO

st.set_page_config(page_title="Dynamic Excel Filter", layout="wide")

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
file_path = os.path.join("data", "all_budget.xlsx")
if not os.path.exists(file_path):
    st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå data/all_budget.xlsx ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå data/")
    st.stop()

df = pd.read_excel(file_path)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
ALL = "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á options ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö dropdown ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ô dropdown ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
def get_filtered_options(df, filter_dict, column):
    filtered_df = df.copy()
    for col, val in filter_dict.items():
        if val != ALL and col != column:
            filtered_df = filtered_df[filtered_df[col].astype(str) == val]
    options = filtered_df[column].dropna().unique().tolist()
    options.sort()
    return [ALL] + options

# ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å session_state ‡∏´‡∏£‡∏∑‡∏≠ default ‡πÄ‡∏õ‡πá‡∏ô "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
if "selected_budget" not in st.session_state:
    st.session_state.selected_budget = ALL
if "selected_year" not in st.session_state:
    st.session_state.selected_year = ALL
if "selected_project" not in st.session_state:
    st.session_state.selected_project = ALL

# ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á 3 ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ô‡∏ï‡∏•‡∏≠‡∏î
filter_dict = {
    "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì": st.session_state.selected_budget,
    "‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì": st.session_state.selected_year,
    "‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£": st.session_state.selected_project,
}

col1, col2, col3 = st.columns(3)

with col1:
    budget_options = get_filtered_options(df, filter_dict, "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì")
    selected_budget = st.selectbox("üí∞ ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", budget_options, index=budget_options.index(st.session_state.selected_budget) if st.session_state.selected_budget in budget_options else 0)
    st.session_state.selected_budget = selected_budget

with col2:
    year_options = get_filtered_options(df, filter_dict, "‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì")
    selected_year = st.selectbox("üìÖ ‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", year_options, index=year_options.index(st.session_state.selected_year) if st.session_state.selected_year in year_options else 0)
    st.session_state.selected_year = selected_year

with col3:
    project_options = get_filtered_options(df, filter_dict, "‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")
    selected_project = st.selectbox("üìå ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", project_options, index=project_options.index(st.session_state.selected_project) if st.session_state.selected_project in project_options else 0)
    st.session_state.selected_project = selected_project

# --- ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô (multiselect ‡∏õ‡∏Å‡∏ï‡∏¥)
import re
def extract_number(s):
    import re
    match = re.search(r"\d+", str(s))
    return int(match.group()) if match else float('inf')

department_options = df["‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô"].dropna().unique().tolist()
department_options_sorted = [ALL] + sorted(department_options, key=extract_number)
selected_departments = st.multiselect("üè¢ ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô", department_options_sorted, default=[ALL])

# --- ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° dropdown ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
filtered_df = df.copy()

if st.session_state.selected_budget != ALL:
    filtered_df = filtered_df[filtered_df["‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"].astype(str) == st.session_state.selected_budget]

if st.session_state.selected_year != ALL:
    filtered_df = filtered_df[filtered_df["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"].astype(str) == st.session_state.selected_year]

if st.session_state.selected_project != ALL:
    filtered_df = filtered_df[filtered_df["‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£"].astype(str) == st.session_state.selected_project]

if ALL not in selected_departments:
    filtered_df = filtered_df[filtered_df["‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô"].isin(selected_departments)]

# ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
if not filtered_df.empty:
    st.info(f"üìà ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(filtered_df)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
else:
    st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")

# ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
st.markdown("### üìÑ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
st.dataframe(filtered_df, use_container_width=True)

# Export ‡πÄ‡∏õ‡πá‡∏ô Excel
def to_excel_bytes(df):
    output = BytesIO()
    with pd.ExcelWriter(output, engine="openpyxl") as writer:
        df.to_excel(writer, index=False)
    return output.getvalue()

if not filtered_df.empty:
    st.download_button(
        label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Excel",
        data=to_excel_bytes(filtered_df),
        file_name="filtered_data.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
